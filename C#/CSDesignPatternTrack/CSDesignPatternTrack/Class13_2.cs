/*****************************
* 2018.01.03 디자인 패턴
* 목표 : Chapter 12 - Compound 패턴 (2)
     ******* 코멘트 *******
새해 첫 시간. 컴파운드 패턴 두 번째 시간.

지난 시간엔 오리 시뮬레이터에 지금까지 배운 디자인 패턴을 적용해봤다.
그러고 몇일정도 쉬는 날을 가졌었고... 1월 1일은 빨간날이었으니까, 1월 2일은 약속이 좀 생겼어서.

오늘은 컴파운드 패턴의 왕이라고 하는 모델-뷰-컨트롤러, MVC를 배워보자.
******************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*****************************
이 미친놈들이 MVC를 노래로 만들어놨다.
참고자료 http://csl.ensm-douai.fr/noury/20#mp3
다운로드가 더럽게 오래걸린다.
노래는 쓸데없이 좋음.
******************************/

/*****************************
노래는 그냥 노래고... 제대로 배워보자.
iTunes 같은 MP3 재생 소프트웨어를 사용하고 있다고 생각해보자.
소프트웨어에서 제공하는 인터페이스를 사용하여 새로운 노래를 추가하거나,
재생목록을 관리하거나, 트랙 이름을 바꿀 수 있다.
모든 노래가 저장되어 있고, 각 노래의 제목 같은 다양한 데이터가 들어있는 데이터베이스는 그 소프트웨어에서 알아서 관리해준다.
곡을 재생하고, 재생하는 동안에 현재 곡 제목, 재생 시간과 같은
다양한 정보를 사용자 인터페이스 상에서 갱신해주는 일도 iTunes가 알아서 처리해 준다.
이게 바로 MVC

사용자가 인터페이스를 건드리면 그 행동이 컨트롤러에게 전달된다.
컨트롤러에서 모델을 조작한다. (Player 모델에게 음악 재생을 요청)
모델에서 뷰한테 상태가 변경되었음을 알린다.
뷰가 디스플레이를 갱신한다.

간단히 세 요소를 정리하자면,
뷰는 사용자 인터페이스다.
모델은 모든 어플리케이션 데이터 및 로직이고,
컨트롤러는 뷰와 모델 사이에 중계자다.

MVC 사이의 상호작용은 다음과 같이 진행된다. p.568의 그림.
(1) 사용자는 뷰하고만 접촉할 수 있다.
(2) 컨트롤러에서는 모델한테 상태를 변경하라는 요청을 한다.
(3) 컨트롤러에서 뷰를 변경해달라고 요청할 수 있다.
(4) 상태가 변경되면 모델에서 뷰한테 그 사실을 알린다.
(5) 뷰에서 모델한테 상태를 요청한다.

이 그림을 지금까지 배운 패턴에 기반해서 해석해보자.
 - 뷰와 컨트롤러는 스트레티지 패턴으로 구현되어 있다.
   뷰 객체를 여러 전략을 써서 설정할 수 있다.
   뷰에서는 애플리케이션의 겉모습에만 신경을 쓰고, 인터페이스의 행동에 대한 결정은 모두 컨트롤러에게 맡긴다.
   또한, 스트래티지 패턴을 사용하는 것은 뷰를 모델로부터 분리시키는 데에 도움이 된다.
   사용자가 요청한 내역을 처리하기 위해서 모델과 이야기를 해야 하는 부분은 바로 컨트롤러기 때문.
   즉, 뷰에서는 그 방법을 전혀 알지 못하고, 알 필요 없다.
 - 뷰는 컴포지트 패턴으로 이루어진다.
   디스플레이는 여러 단계로 겹쳐져 있을 수 있는 일련의 윈도우, 패널, 버튼, 텍스트 레이블 등으로 구성된다.
   각 디스플레이 항목은 복합 객체 또는 잎이 될 수 있다.
   복합 객체는 윈도우, 레이아웃 등이고,
   잎은 버튼, 텍스트필드 등이 해당된다.
   컨트롤러에서 뷰에게 화면을 갱신해 달라고 요청하면 최상위 뷰 구성요소한테만 화면을 갱신하라고 얘기하면 된다.
   나머지는 컴포지트 패턴에 의해 자동으로 처리된다.
 - 모델에서는 옵저버 패턴을 써서 상태가 변경되었을 때 그 모델과 연관된 객체들한테 연락을 한다.
   옵저버 패턴을 사용하면 모델을 뷰 및 컨트롤러로부터 완전히 독립시킬 수 있다.
   한 모델에서 서로 다른 뷰를 사용할 수도 있고, 심지어 다른 여러 개의 뷰를 동시에 사용하는 것도 가능해진다.
******************************/

/*****************************
책에는 물론 MVC의 실습 예제가 있긴 한데...
오늘은 예제 구현은 좀 미뤄보기로 하고...

사실 MVC가 주로 쓰이는 곳은 웹 환경이 아닐까 조심스레 추측해본다.
참고자료 https://opentutorials.org/course/697/3828

(1) 사용자가 웹사이트에 접속한다. (User Uses Controller)
(2) Controller는 사용자가 요청한 웹페이지를 서비스 하기 위해서 모델을 호출한다. (Controller Manipulates Model)
(3) 모델은 데이터베이스나 파일과 같은 데이터 소스를 제어한 후에 그 결과를 리턴한다.
(4) Controller는 Model이 리턴한 결과를 View에 반영한다. (Model Updates View)
(5) 데이터가 반영된 VIew는 사용자에게 보여진다. (View's shown User, User Sees View)
******************************/

namespace CSDesignPatternTrack
{
    class Class13_2
    {
    }
}

/*****************************
오늘은 그렇게 많은 내용을 하진 않음.
실은 책에는 더 많은 내용이 있긴 한데,
MVC 구현은 나중에 웹 프로그래밍을 제대로 배우면서 짚어나가보자.
웹 프로그래밍은 진짜 이번 디자인 패턴 배운것 처럼 각잡고 배워야겠다.
******************************/
