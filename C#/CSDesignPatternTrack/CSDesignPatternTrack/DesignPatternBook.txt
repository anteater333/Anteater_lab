								=== 디자인 패턴 도감 ===
				 (패턴 == 특정 컨텍스트 내에서 주어진 문제에 대한 해결책.)

[B] : Behavioral
[S] : Structural
[C] : Creational

Pattern #01 Strategy [B]
스트래티지 패턴에서는 알고리즘군을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다.
스트래티지 패턴을 활용하면 알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 변경할 수 있다.

Pattern #02 Observer [B]
옵저버 패턴에서는 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고
자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의한다.

Pattern #03 Decorator [S]
데코레이터 패턴에서는 객체에 추가적인 요건을 동적으로 첨가한다.
데코레이터는 서브클래스를 만드는 것을 통해서 기능을 유연하게 확장할 수 있는 방법을 제공한다.

Pattern #04 Factory Method [C]
팩토리 메소드 패턴에서는 객체를 생성하기 위한 인터페이스를 정의하는데,
어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정하게 만든다.
즉, 팩토리 메소드 패턴을 이용하면 클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기게 된다.

Pattern #05 Abstract Factory [C]
추상 팩토리 패턴에서는 인터페이스를 이용하여 서로 연관된,
또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성할 수 있다.

Pattern #06 Singleton [C]
싱글턴 패턴은 해당 클래스의 인스턴스가 하나만 만들어지고,
어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴이다.

Pattern #07 Command [B]
커맨드 패턴을 이용하면 요구 사항을 객체로 캡슐화 할 수 있으며,
매개변수를 써서 여러 가지 다른 요구 사항을 집어넣을 수도 있다.
또한 요청 내역을 큐에 저장하거나 로그로 기록할 수도 있으며, 작업취소 기능도 지원 가능하다.

Pattern #08 Adapter [S]
한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환한다.
어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.

Pattern #09 Facade [S]
어떤 서브시스템의 일련의 인터페이스에 대한 통합된 인터페이스를 제공한다.
퍼사드에서 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할 수 있다.

Pattern #10 Template Method [B]
템플릿 메소드 패턴에서는 메소드에서 알고리즘의 골격을 정의한다.
알고리즘의 여러 단계 중 일부는 서브클래스에서 구현할 수 있다.
템플릿 메소드를 이용하면 알고리즘의 구조는 그대로 유지하면서 서브클래스에서 특정 단계를 재정의할 수 있다.

Pattern #11 Iterator [B]
이터레이터 패턴은 컬렉션 구현 방법을 노출시키지 않으면서도
그 집합체 안에 들어있는 모든 항목에 접근할 수 있게 해 주는 방법을 제공해 준다.

Pattern #12 Composite [S]
컴포지트 패턴을 이용하면 객체들을 트리 구조로 구성하여 부분과 전체를 나타내는 계층구조로 만들 수 있다.
이 패턴을 이용하면 클라이언트에서 개별 객체와 다른 객체들로 구성된 복합 객체를 똑같은 방법으로 다를 수 있다.

Pattern #13 State [B]
스테이트 패턴을 이용하면 객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있다.
마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있다.

Pattern #14 Proxy [S]
어떤 객체에 대한 접근을 제어하기 위한 용도로 대리인이나 대변인에 해당하는 객체를 제공하는 패턴이다.

Pattern #15 Bridge [S]
추상 클래스와 구현 클래스를 서로 다른 클래스 계층구조에 집어넣어
그 둘을 모두 변경시킬 수 있게 한다.

Pattern #16 Builder [C]
복잡한 객체를 만드는 과정을 분리시켜 캡슐화한다.
여러 단계와 다양한 절차를 통해서 객체를 만들 수 있도록 한다.

Pattern #17 Chain of Responsibility [B]
한 요청을 두 개 이상의 객체에서 처리하게 해준다.
요청을 받는 객체를 연결해 처리 가능한 객체가 요청을 받을 때 까지 요청을 전달한다.

Pattern #18 Flyweight [S]
어떤 클래스의 인스턴스 하나로 여러 개의 가상 인스턴스를 제공해 메모리를 절약한다.

Pattern #19 Interpreter [B]
간단한 언어를 구현해야 하는 경우에,
인터프리터 패턴에서는 문법 및 그 구문을 번역하기 위한 인터프리터를 표현한 것을 클래스를 기반으로 정의한다.

Pattern #20 Mediator [B]
객체 사이의 통신을 캡슐화하는 객체를 정의한다.
복잡한 통신과 제어를 한 곳으로 집중할 수 있다.

Pattern #21 Memento [B]
캡슐화를 훼손하지 않고 객체의 내부 상태를 저장하는 기능을 제공한다.

Pattern #22 Prototype [C]
인스턴스를 만드는 데에 자원을 많이 잡아먹거나 과정이 복잡한 경우
기존 인스턴스를 복사해 새로운 인스턴스를 만들 수 있게 한다.

Pattern #23 Visitor [B]
비지터 패턴은 객체의 구조와 기능을 분리할 수 있는 패턴이다.
어떤 구조에 대해서 구조를 변경하지 않으면서 여러가지 기능을 추가할 수 있다.

// Anteater